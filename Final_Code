/*LATEST WORKING VERSION OF CODE FOR DEXII
  Cornerstone of Engineering II Design Project - Milestone 3
  D.Doyle M.Anderson A.George C.Assli
  doyle.do@northeastern.edu
 
  The Simon Says game flashes a pattern using LED lights, then the player must repeat the pattern.
  This 2.0 Version of the Dexii code incorporates the LCD display into the software and eventually the hardware design
  This version also includes the use of a switch to turn on and off the game
  This version incorporates a highscore as well which is displayed to the user
  This version includes the game and UI code


  4/11/2024
*/


#include <LiquidCrystal.h>          //the liquid crystal library contains commands for printing to the display


//0.0 Initialize the pins where the buttons, LEDs and buzzer connect
int button[] = {33, 32, 31, 30, 50, 28, 27, 26, 22, 25};  //BUTTONS --> Left Blue is [0], Left Yellow is [1], Left Red green is [2], Left White blue is [3], Left Green is [4], Right Green is [5], Right White is [6], Right Red is [7], Right Yellow is [8], Right Blue is [9]
int led[] = {13, 12, 4, 5, 6, 7, 8, 9, 10, 11};     //LEDS --> Left Blue is [0], Left Yellow is [1], Left Red green is [2], Left White blue is [3], Left Green is [4], Right Green is [5], Right White is [6], Right Red is [7], Right Yellow is [8], Right Blue is [9]
int tones[] = {220, 247, 261, 294, 330, 349, 392, 440, 494, 523};   //tones to play with each button (ABCDEFGABC)


int switchPin = 2;


int j;
int highscore = 0;


int roundsToWin = 10;         //number of rounds the player has to play before they win the game (the array can only hold up to 16 rounds)
int buttonSequence[16];       //make an array of numbers that will be the sequence that the player needs to remember


int buzzerPin = 37;           //pin that the buzzer is connected to


LiquidCrystal lcd (47, 46 , 23 , 44 , 43 , 38 );


int pressedButton = 4;        //a variable to remember which button is being pressed. 4 is the value if no button is being pressed.
int roundCounter = 1;         //keeps track of what round the player is on




long startTime = 0;           //timer variable for time limit on button press
long timeLimit = 2000;        //time limit to hit a button


boolean gameStarted = false;      //variable to tell the game whether or not to play the start sequence


void setup() {


  lcd.begin (16,2); //Set the number of rows and columns to initialize the lcd
  lcd.clear();


  //set all of the button pins to input_pullup (use the built-in pull-up resistors)
  pinMode(button[0], INPUT_PULLUP);
  pinMode(button[1], INPUT_PULLUP);
  pinMode(button[2], INPUT_PULLUP);
  pinMode(button[3], INPUT_PULLUP);
  pinMode(button[4], INPUT_PULLUP);
  pinMode(button[5], INPUT_PULLUP);
  pinMode(button[6], INPUT_PULLUP);
  pinMode(button[7], INPUT_PULLUP);
  pinMode(button[8], INPUT_PULLUP);
  pinMode(button[9], INPUT_PULLUP);


  //set all of the LED pins to output
  pinMode(led[0], OUTPUT);
  pinMode(led[1], OUTPUT);
  pinMode(led[2], OUTPUT);
  pinMode(led[3], OUTPUT); //RGB RED LEFT
  pinMode(led[4], OUTPUT);
  pinMode(led[5], OUTPUT);
  pinMode(led[6], OUTPUT); //RGB RED RIGHT
  pinMode(led[7], OUTPUT);
  pinMode(led[8], OUTPUT);
  pinMode(led[9], OUTPUT);


  pinMode(buzzerPin, OUTPUT);   //set the buzzer pin to output
  pinMode(switchPin, INPUT_PULLUP);
}


void loop() {


if (digitalRead(2) == LOW){
  if (gameStarted == false) {   //if the game hasn't started yet
    lcd.clear();
    lcd.setCursor(0, 0);              //set the cursor to the 0,0 position (top left corner)
    lcd.print ("WELCOME TO DEXII");       //print hello, world! starting at that position
    lcd.setCursor(0,1);
    lcd.print ("Game Started...");
    startSequence();            //flash the start sequence
    roundCounter = 0;           //reset the round counter
    delay(1500);                //wait a second and a half
    gameStarted = true;         //set gameStarted to true so that this sequence doesn't start again
  }


  //each round, start by flashing out the sequence to be repeated
  for (int i = 0; i <= roundCounter; i++) { //go through the array up to the current round number
    flashLED(buttonSequence[i]);          //turn on the LED for that array position and play the sound
    delay(200);                           //wait
    allLEDoff();                          //turn all of the LEDs off
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print ("Round #");
    lcd.setCursor(9,0);
    j=i+1;
    lcd.print (j);
    lcd.setCursor(0,1);
    lcd.print ("Highscore ");
    lcd.setCursor (11,1);
    lcd.print (highscore);
    delay(200);
      if (j > highscore) {
        highscore = j;
        lcd.clear();
        lcd.setCursor (0,0);
        lcd.print ("NEW HIGHSCORE");
        delay (200);
        lcd.clear();
        lcd.print ("NEW HIGHSCORE");
        delay (200);
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print ("Round #");
        lcd.setCursor(9,0);
        j=i+1;
        lcd.print (j);
        lcd.setCursor(0,1);
        lcd.print ("Highscore ");
        lcd.setCursor (11,1);
        lcd.print (highscore);


    }
  }


  //then start going through the sequence one at a time and see if the user presses the correct button
  for (int i = 0; i <= roundCounter; i++) { //for each button to be pressed in the sequence


    startTime = millis();                 //record the start time


    while (gameStarted == true) { //loop until the player presses a button or the time limit is up (the time limit check is in an if statement)


      pressedButton = buttonCheck();      //every loop check to see which button is pressed


      if (pressedButton < 10) {            //if a button is pressed... (4 means that no button is pressed)


        flashLED(pressedButton);          //flash the LED for the button that was pressed


        if (pressedButton == buttonSequence[i]) { //if the button matches the button in the sequence
          delay(250);                   //leave the LED light on for a moment
          allLEDoff();                  //then turn off all of the lights and
          break;                        //end the while loop (this will go to the next number in the for loop)


        } else {                          //if the button doesn't match the button in the sequence
          loseSequence();               //play the lose sequence (the loose sequence stops the program)
          break;                        //when the program gets back from the lose sequence, break the while loop so that the game can start over
        }


      } else {                            //if no button is pressed
        allLEDoff();                      //turn all the LEDs off
      }


      //check to see if the time limit is up
      if (millis() - startTime > timeLimit) { //if the time limit is up
        loseSequence();                       //play the lose sequence
        break;                                //when the program gets back from the lose sequence, break the while loop so that the game can start over
      }
    }
  }


  if (gameStarted == true) {
    roundCounter = roundCounter + 1;      //increase the round number by 1


    if (roundCounter >= roundsToWin) {              //if the player has gotten to the 16th round
      winSequence();                      //play the winning song
    }


    delay(500);                           //wait for half a second between rounds
  }
}
else {
  lcd.clear();
  allLEDoff();
}
}


//-------------------------FUNCTIONS------------------------------------


//FLASH LED
void flashLED (int ledNumber){


  digitalWrite(led[ledNumber], HIGH);
  tone(buzzerPin, tones[ledNumber]);  
}


//TURN ALL LEDS OFF
void allLEDoff () {
  //turn all the LEDs off
  digitalWrite(led[0], LOW);
  digitalWrite(led[1], LOW);
  digitalWrite(led[2], LOW);
  digitalWrite(led[3], LOW);
  digitalWrite(led[4], LOW);
  digitalWrite(led[5], LOW);
  digitalWrite(led[6], LOW);
  digitalWrite(led[7], LOW);
  digitalWrite(led[8], LOW);
  digitalWrite(led[9], LOW);




  //turn the buzzer off
  noTone(buzzerPin);
}


//CHECK WHICH BUTTON IS PRESSED
int buttonCheck() {
  //check if any buttons are being pressed
  if (digitalRead(button[0]) == LOW) {
    return 0;
  } else if (digitalRead(button[1]) == LOW) {
    return 1;
  } else if (digitalRead(button[2]) == LOW) {
    return 2;
  } else if (digitalRead(button[3]) == LOW) {
    return 3;
  }else if (digitalRead(button[4]) == LOW) {
    return 4;
  }else if (digitalRead(button[5]) == LOW) {
    return 5;
  }else if (digitalRead(button[6]) == LOW) {
    return 6;
  }else if (digitalRead(button[7]) == LOW) {
    return 7;
  }else if (digitalRead(button[8]) == LOW) {
    return 8;
  }else if (digitalRead(button[9]) == LOW) {
    return 9;
  }else {
    return 10; //this will be the value for no button being pressed
  }
}


//START SEQUENCE
void startSequence() {


  randomSeed(analogRead(0));   //make sure the random numbers are really random


  //populate the buttonSequence array with random numbers from 0 to 3
  for (int i = 0; i <= roundsToWin; i++) {
    buttonSequence[i] = round(random(0, 9));
  }


  //flash all of the LEDs when the game starts
    for (int i = 0; i <= 2; i++) {
    digitalWrite(led[0], HIGH);
    tone(buzzerPin, tones[0]);
    delay(50);
    digitalWrite(led[0], LOW);
    digitalWrite(led[1], HIGH);
    tone(buzzerPin, tones[1]);
    delay(50);
    digitalWrite(led[1], LOW);
    digitalWrite(led[2], HIGH);
    tone(buzzerPin, tones[2]);
    delay(50);
    digitalWrite(led[2], LOW);
    digitalWrite(led[3], HIGH);
    tone(buzzerPin, tones[3]);
    delay(50);
    digitalWrite(led[3], LOW);
    digitalWrite(led[4], HIGH);
    tone(buzzerPin, tones[4]);
    delay(50);
    digitalWrite(led[4], LOW);
    digitalWrite(led[5], HIGH);
    tone(buzzerPin, tones[5]);
    delay(50);
    digitalWrite(led[5], LOW);
    digitalWrite(led[6], HIGH);
    tone(buzzerPin, tones[6]);
    delay(50);
    digitalWrite(led[6], LOW);
    digitalWrite(led[7], HIGH);
    tone(buzzerPin, tones[7]);
    delay(50);
    digitalWrite(led[7], LOW);
    digitalWrite(led[8], HIGH);
    tone(buzzerPin, tones[8]);
    delay(50);
    digitalWrite(led[8], LOW);
    digitalWrite(led[9], HIGH);
    tone(buzzerPin, tones[9]);
    delay(50);
    digitalWrite(led[9], LOW);
    }
  for (int i = 0; i <= 3; i++) {


    tone(buzzerPin, tones[i], 200); //play one of the 4 tones


    //turn all of the leds on
    digitalWrite(led[0], HIGH);
    digitalWrite(led[1], HIGH);
    digitalWrite(led[2], HIGH);
    digitalWrite(led[3], HIGH);
    digitalWrite(led[4], HIGH);
    digitalWrite(led[5], HIGH);
    digitalWrite(led[6], HIGH);
    digitalWrite(led[7], HIGH);
    digitalWrite(led[8], HIGH);
    digitalWrite(led[9], HIGH);


    delay(100);         //wait for a moment


    //turn all of the leds off
    digitalWrite(led[0], LOW);
    digitalWrite(led[1], LOW);
    digitalWrite(led[2], LOW);
    digitalWrite(led[3], LOW);
    digitalWrite(led[4], LOW);
    digitalWrite(led[5], LOW);
    digitalWrite(led[6], LOW);
    digitalWrite(led[7], LOW);
    digitalWrite(led[8], LOW);
    digitalWrite(led[9], LOW);


    delay(100);   //wait for a moment


  } //this will repeat 4 times
}


//WIN SEQUENCE
void winSequence() {


  //turn all the LEDs on
  for (int j = 0; j <= 9; j++) {
    digitalWrite(led[j], HIGH);
  }


  //play the 1Up noise
  tone(buzzerPin, 1318, 150);   //E6
  delay(175);
  tone(buzzerPin, 1567, 150);   //G6
  delay(175);
  tone(buzzerPin, 2637, 150);   //E7
  delay(175);
  tone(buzzerPin, 2093, 150);   //C7
  delay(175);
  tone(buzzerPin, 2349, 150);   //D7
  delay(175);
  tone(buzzerPin, 3135, 500);   //G7
  delay(500);


  //wait until a button is pressed
  do {
    pressedButton = buttonCheck();
  } while (pressedButton > 9);   //Make sure that this line is correct...if not 9 make 3
  delay(100);


  gameStarted = false;   //reset the game so that the start sequence will play again.


}


//LOSE SEQUENCE
void loseSequence() {
  lcd.clear();
  lcd.setCursor (0,0);
  lcd.print ("Great Game!!");
  lcd.setCursor (0,1);
  lcd.print ("Push To Go Again");


  //turn all the LEDs on
    digitalWrite(led[0], HIGH);
    digitalWrite(led[1], HIGH);
    digitalWrite(led[2], HIGH);
    digitalWrite(led[3], HIGH);
    digitalWrite(led[4], HIGH);
    digitalWrite(led[5], HIGH);
    digitalWrite(led[6], HIGH);
    digitalWrite(led[7], HIGH);
    digitalWrite(led[8], HIGH);
    digitalWrite(led[9], HIGH);


  //play the 1Up noise
  tone(buzzerPin, 130, 250);   //E6
  delay(275);
  tone(buzzerPin, 73, 250);   //G6
  delay(275);
  tone(buzzerPin, 65, 150);   //E7
  delay(175);
  tone(buzzerPin, 98, 500);   //C7
  delay(500);


  //wait until a button is pressed
  do {
    pressedButton = buttonCheck();
  } while (pressedButton > 9);     //Same thing with this line make sure that its working if not back to 3
  delay(200);


  gameStarted = false;   //reset the game so that the start sequence will play again.
}
